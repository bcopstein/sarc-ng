# Base Docker Compose configuration for SARC-NG
# This file contains development settings and common configurations
# For production, run: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

# YAML anchors for reusable configurations
x-common-variables: &common-variables
  DB_HOST: db
  DB_PORT: 3306
  DB_USER: root
  DB_NAME: ${DB_NAME:-sarcng}

x-app-common: &app-common
  build:
    context: ../
    dockerfile: docker/Dockerfile
    target: development
    args:
      USER_ID: ${USER_ID:-1000}
      GROUP_ID: ${GROUP_ID:-1000}
      USERNAME: ${USERNAME:-developer}
  environment:
    <<: *common-variables
    PORT: 8080
  ports:
    - "8080:8080"
    - "2345:2345" # Delve debugger port for development
  depends_on:
    db:
      condition: service_healthy
  networks:
    - sarc-network

x-db-common: &db-common
  image: mysql:8.0
  environment:
    MYSQL_ROOT_PASSWORD: ${DB_PASSWORD:-example}
    MYSQL_DATABASE: ${DB_NAME:-sarcng}
  ports:
    - "3306:3306" # Expose for development access
  volumes:
    - db_data:/var/lib/mysql
  networks:
    - sarc-network
  healthcheck:
    test:
      [
        "CMD",
        "mysqladmin",
        "ping",
        "-h",
        "localhost",
        "-u",
        "root",
        "-p$$MYSQL_ROOT_PASSWORD",
      ]
    interval: 5s
    timeout: 5s
    retries: 10
    start_period: 5s

services:
  app:
    <<: *app-common
    container_name: sarc-ng-server-dev
    environment:
      <<: *common-variables
      DB_PASSWORD: ${DB_PASSWORD:-example}
      GIN_MODE: debug
      LOG_LEVEL: debug
      HOT_RELOAD: "true"
      GOCACHE: /go/cache
      GOMODCACHE: /go/pkg/mod
    volumes:
      - ../:/app
      - go-modules:/go/pkg/mod
      - go-cache:/go/cache
    restart: unless-stopped
    tty: true
    stdin_open: true
    # No healthcheck for app to avoid continuous health polling

  db:
    <<: *db-common
    container_name: sarc-ng-db-dev
    restart: unless-stopped

  adminer:
    image: adminer
    container_name: sarc-ng-adminer-dev
    ports:
      - "8081:8080"
    environment:
      ADMINER_DEFAULT_SERVER: db
    depends_on:
      - db
    networks:
      - sarc-network
    restart: unless-stopped
    # No healthcheck needed for adminer

  info:
    image: alpine
    container_name: sarc-ng-info
    volumes:
      - ./show-info.sh:/show-info.sh:ro
    depends_on:
      - db
      - app
      - adminer
    entrypoint: ["/bin/sh", "-c"]
    command: >
      "apk add --no-cache bash curl && 
       echo 'Waiting for services to start...' &&
       sleep 10 &&
       echo 'All services are up! Displaying service information...' && 
       bash /show-info.sh"
    restart: "no"
    network_mode: "host"

networks:
  sarc-network:
    driver: bridge
    name: sarc-ng-network

volumes:
  db_data:
    driver: local
  go-modules:
    driver: local
  go-cache:
    driver: local
# End of Docker Compose configuration

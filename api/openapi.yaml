openapi: 3.1.0
info:
  title: SARC-NG API
  description: |
    API for SARC-NG (Resource Management and Scheduling System)
    
    This API provides endpoints for managing buildings, classrooms, resources, 
    and scheduling through reservations and lessons.
  version: 1.0.0
  contact:
    name: SARC-NG Support
    email: support@example.com

servers:
  - url: http://localhost:8080/v1
    description: Local development server

tags:
  - name: buildings
    description: Building management
  - name: classes
    description: Class management
  - name: lessons
    description: Lesson scheduling and management
  - name: reservations
    description: Resource reservation management
  - name: resources
    description: Resource management
  - name: auth
    description: Authentication and authorization

paths:
  # Building endpoints
  /buildings:
    get:
      summary: Get all buildings
      operationId: getAllBuildings
      tags:
        - buildings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Building'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new building
      operationId: createBuilding
      tags:
        - buildings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildingInput'
      responses:
        '201':
          description: Building created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /buildings/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Building ID
    get:
      summary: Get building by ID
      operationId: getBuildingById
      tags:
        - buildings
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update building
      operationId: updateBuilding
      tags:
        - buildings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BuildingInput'
      responses:
        '200':
          description: Building updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Building'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete building
      operationId: deleteBuilding
      tags:
        - buildings
      responses:
        '204':
          description: Building deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Classes endpoints
  /classes:
    get:
      summary: Get all classes
      operationId: getAllClasses
      tags:
        - classes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new class
      operationId: createClass
      tags:
        - classes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassInput'
      responses:
        '201':
          description: Class created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /classes/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Class ID
    get:
      summary: Get class by ID
      operationId: getClassById
      tags:
        - classes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update class
      operationId: updateClass
      tags:
        - classes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClassInput'
      responses:
        '200':
          description: Class updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete class
      operationId: deleteClass
      tags:
        - classes
      responses:
        '204':
          description: Class deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Resources endpoints
  /resources:
    get:
      summary: Get all resources
      operationId: getAllResources
      tags:
        - resources
      parameters:
        - name: type
          in: query
          required: false
          schema:
            type: string
          description: Filter by resource type
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Resource'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new resource
      operationId: createResource
      tags:
        - resources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceInput'
      responses:
        '201':
          description: Resource created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /resources/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Resource ID
    get:
      summary: Get resource by ID
      operationId: getResourceById
      tags:
        - resources
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update resource
      operationId: updateResource
      tags:
        - resources
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceInput'
      responses:
        '200':
          description: Resource updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Resource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete resource
      operationId: deleteResource
      tags:
        - resources
      responses:
        '204':
          description: Resource deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Reservation endpoints
  /reservations:
    get:
      summary: Get all reservations
      operationId: getAllReservations
      tags:
        - reservations
      parameters:
        - name: fromDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Start date for filtering reservations
        - name: toDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: End date for filtering reservations
        - name: resourceId
          in: query
          required: false
          schema:
            type: integer
          description: Resource ID for filtering reservations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reservation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new reservation
      operationId: createReservation
      tags:
        - reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationInput'
      responses:
        '201':
          description: Reservation created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /reservations/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Reservation ID
    get:
      summary: Get reservation by ID
      operationId: getReservationById
      tags:
        - reservations
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update reservation
      operationId: updateReservation
      tags:
        - reservations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReservationInput'
      responses:
        '200':
          description: Reservation updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete reservation
      operationId: deleteReservation
      tags:
        - reservations
      responses:
        '204':
          description: Reservation deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Lesson endpoints
  /lessons:
    get:
      summary: Get all lessons
      operationId: getAllLessons
      tags:
        - lessons
      parameters:
        - name: classId
          in: query
          required: false
          schema:
            type: integer
          description: Filter by class ID
        - name: fromDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: Start date for filtering lessons
        - name: toDate
          in: query
          required: false
          schema:
            type: string
            format: date
          description: End date for filtering lessons
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Lesson'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '500':
          $ref: '#/components/responses/InternalServerError'
    post:
      summary: Create a new lesson
      operationId: createLesson
      tags:
        - lessons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LessonInput'
      responses:
        '201':
          description: Lesson created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lesson'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /lessons/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
        description: Lesson ID
    get:
      summary: Get lesson by ID
      operationId: getLessonById
      tags:
        - lessons
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lesson'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'
    put:
      summary: Update lesson
      operationId: updateLesson
      tags:
        - lessons
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LessonInput'
      responses:
        '200':
          description: Lesson updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Lesson'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalServerError'
    delete:
      summary: Delete lesson
      operationId: deleteLesson
      tags:
        - lessons
      responses:
        '204':
          description: Lesson deleted
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'

  # Authentication endpoints
  /auth/login:
    post:
      summary: User login
      operationId: login
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Building:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Main Campus Building"
        code:
          type: string
          example: "MCB-A"
        address:
          type: string
          example: "123 University Ave"
        floors:
          type: integer
          example: 5
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - code

    BuildingInput:
      type: object
      properties:
        name:
          type: string
          example: "Main Campus Building"
        code:
          type: string
          example: "MCB-A"
        address:
          type: string
          example: "123 University Ave"
        floors:
          type: integer
          example: 5
      required:
        - name
        - code

    Class:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Computer Science 101"
        code:
          type: string
          example: "CS101"
        instructorName:
          type: string
          example: "Dr. Jane Smith"
        semester:
          type: string
          example: "Fall 2023"
        capacity:
          type: integer
          example: 30
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - code
        - instructorName

    ClassInput:
      type: object
      properties:
        name:
          type: string
          example: "Computer Science 101"
        code:
          type: string
          example: "CS101"
        instructorName:
          type: string
          example: "Dr. Jane Smith"
        semester:
          type: string
          example: "Fall 2023"
        capacity:
          type: integer
          example: 30
      required:
        - name
        - code
        - instructorName

    Resource:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: "Lecture Hall A"
        type:
          type: string
          enum: [ classroom, equipment, lab ]
          example: "classroom"
        capacity:
          type: integer
          example: 50
        location:
          type: string
          example: "Building A, Floor 2"
        buildingId:
          type: integer
          example: 1
        details:
          type: object
          additionalProperties: true
          example: { "hasProjector": true, "hasComputers": false }
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - type

    ResourceInput:
      type: object
      properties:
        name:
          type: string
          example: "Lecture Hall A"
        type:
          type: string
          enum: [ classroom, equipment, lab ]
          example: "classroom"
        capacity:
          type: integer
          example: 50
        location:
          type: string
          example: "Building A, Floor 2"
        buildingId:
          type: integer
          example: 1
        details:
          type: object
          additionalProperties: true
          example: { "hasProjector": true, "hasComputers": false }
      required:
        - name
        - type

    Reservation:
      type: object
      properties:
        id:
          type: integer
          example: 1
        resourceId:
          type: integer
          example: 1
        userId:
          type: integer
          example: 5
        userName:
          type: string
          example: "John Doe"
        startTime:
          type: string
          format: date-time
          example: "2023-09-01T09:00:00Z"
        endTime:
          type: string
          format: date-time
          example: "2023-09-01T11:00:00Z"
        purpose:
          type: string
          example: "Workshop session"
        status:
          type: string
          enum: [ pending, confirmed, cancelled ]
          example: "confirmed"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - resourceId
        - userId
        - startTime
        - endTime
        - status

    ReservationInput:
      type: object
      properties:
        resourceId:
          type: integer
          example: 1
        startTime:
          type: string
          format: date-time
          example: "2023-09-01T09:00:00Z"
        endTime:
          type: string
          format: date-time
          example: "2023-09-01T11:00:00Z"
        purpose:
          type: string
          example: "Workshop session"
        status:
          type: string
          enum: [ pending, confirmed, cancelled ]
          example: "pending"
      required:
        - resourceId
        - startTime
        - endTime

    Lesson:
      type: object
      properties:
        id:
          type: integer
          example: 1
        classId:
          type: integer
          example: 1
        resourceId:
          type: integer
          example: 2
        startTime:
          type: string
          format: date-time
          example: "2023-09-04T14:00:00Z"
        endTime:
          type: string
          format: date-time
          example: "2023-09-04T15:30:00Z"
        repeatPattern:
          type: string
          enum: [ once, daily, weekly, biweekly ]
          example: "weekly"
        repeatUntil:
          type: string
          format: date
          example: "2023-12-15"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - classId
        - resourceId
        - startTime
        - endTime

    LessonInput:
      type: object
      properties:
        classId:
          type: integer
          example: 1
        resourceId:
          type: integer
          example: 2
        startTime:
          type: string
          format: date-time
          example: "2023-09-04T14:00:00Z"
        endTime:
          type: string
          format: date-time
          example: "2023-09-04T15:30:00Z"
        repeatPattern:
          type: string
          enum: [ once, daily, weekly, biweekly ]
          example: "weekly"
        repeatUntil:
          type: string
          format: date
          example: "2023-12-15"
      required:
        - classId
        - resourceId
        - startTime
        - endTime

    LoginRequest:
      type: object
      properties:
        username:
          type: string
          example: "user@example.com"
        password:
          type: string
          example: "password123"
      required:
        - username
        - password

    LoginResponse:
      type: object
      properties:
        token:
          type: string
          example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        user:
          type: object
          properties:
            id:
              type: integer
              example: 1
            name:
              type: string
              example: "John Doe"
            email:
              type: string
              example: "user@example.com"
            role:
              type: string
              example: "admin"
      required:
        - token
        - user

    Error:
      type: object
      properties:
        code:
          type: string
          example: "resource_not_found"
        message:
          type: string
          example: "The requested resource was not found"
      required:
        - code
        - message

  responses:
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Conflict:
      description: Conflict with existing resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

security:
  - BearerAuth: [ ]
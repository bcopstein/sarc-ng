AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'SARC-NG Serverless Application

  SAM Template for SARC-NG deployment using Lambda and RDS

  '
Globals:
  Function:
    Timeout: 30
    MemorySize: 512
    Runtime: provided.al2
    Architectures:
    - x86_64
Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues:
    - dev
    - staging
    - prod
    Description: Environment name
  DBPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Password for RDS MySQL instance
    Default: ChangeMe123!
  DBName:
    Type: String
    Default: sarcng
    Description: Database name
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 20.10.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-vpc
      - Key: Environment
        Value:
          Ref: Environment
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-igw
      - Key: Environment
        Value:
          Ref: Environment
  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId:
        Ref: VPC
      InternetGatewayId:
        Ref: InternetGateway
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 20.10.11.0/24
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-public-1
      - Key: Environment
        Value:
          Ref: Environment
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 20.10.12.0/24
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-public-2
      - Key: Environment
        Value:
          Ref: Environment
  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 20.10.13.0/24
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs: ''
      MapPublicIpOnLaunch: true
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-public-3
      - Key: Environment
        Value:
          Ref: Environment
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 20.10.1.0/24
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-private-1
      - Key: Environment
        Value:
          Ref: Environment
  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 20.10.2.0/24
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-private-2
      - Key: Environment
        Value:
          Ref: Environment
  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 20.10.3.0/24
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-private-3
      - Key: Environment
        Value:
          Ref: Environment
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 20.10.21.0/24
      AvailabilityZone:
        Fn::Select:
        - 0
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-db-1
      - Key: Environment
        Value:
          Ref: Environment
  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 20.10.22.0/24
      AvailabilityZone:
        Fn::Select:
        - 1
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-db-2
      - Key: Environment
        Value:
          Ref: Environment
  DatabaseSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: VPC
      CidrBlock: 20.10.23.0/24
      AvailabilityZone:
        Fn::Select:
        - 2
        - Fn::GetAZs: ''
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-db-3
      - Key: Environment
        Value:
          Ref: Environment
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-public-rt
      - Key: Environment
        Value:
          Ref: Environment
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId:
        Ref: PublicRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet1
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet2
      RouteTableId:
        Ref: PublicRouteTable
  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId:
        Ref: PublicSubnet3
      RouteTableId:
        Ref: PublicRouteTable
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for SARC-NG RDS
      SubnetIds:
      - Ref: DatabaseSubnet1
      - Ref: DatabaseSubnet2
      - Ref: DatabaseSubnet3
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-db-subnet-group
      - Key: Environment
        Value:
          Ref: Environment
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId:
        Ref: VPC
      SecurityGroupEgress:
      - IpProtocol: -1
        CidrIp: '0.0.0.0/0'
        Description: Allow all outbound traffic
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-lambda-sg
      - Key: Environment
        Value:
          Ref: Environment
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access from Lambda
      VpcId:
        Ref: VPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId:
          Ref: LambdaSecurityGroup
        Description: Allow MySQL from Lambda
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-rds-sg
      - Key: Environment
        Value:
          Ref: Environment
  SarcNgFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
      SamResourceId: SarcNgFunction
    Properties:
      CodeUri: SarcNgFunction
      Handler: bootstrap
      Role:
        Fn::Sub: arn:aws:iam::${AWS::AccountId}:role/LabRole
      VpcConfig:
        SecurityGroupIds:
        - Ref: LambdaSecurityGroup
        SubnetIds:
        - Ref: PublicSubnet1
        - Ref: PublicSubnet2
        - Ref: PublicSubnet3
      Environment:
        Variables:
          DB_HOST:
            Fn::GetAtt:
            - SarcDatabase
            - Endpoint.Address
          DB_PORT:
            Fn::GetAtt:
            - SarcDatabase
            - Endpoint.Port
          DB_NAME:
            Ref: DBName
          DB_USER: root
          DB_PASSWORD:
            Ref: DBPassword
          GIN_MODE: release
          LOG_LEVEL: info
          ENVIRONMENT:
            Ref: Environment
      Events:
        ApiGateway:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
        ApiGatewayRoot:
          Type: Api
          Properties:
            Path: /
            Method: ANY
  SarcDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier:
        Fn::Sub: ${Environment}-sarc-ng-db
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: '8.0'
      MasterUsername: root
      MasterUserPassword:
        Ref: DBPassword
      DBName:
        Ref: DBName
      AllocatedStorage: 20
      StorageType: gp2
      BackupRetentionPeriod: 0
      DeleteAutomatedBackups: true
      DeletionProtection: false
      PubliclyAccessible: false
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VPCSecurityGroups:
      - Fn::GetAtt:
        - RDSSecurityGroup
        - GroupId
      Tags:
      - Key: Name
        Value:
          Fn::Sub: ${Environment}-sarc-ng-database
      - Key: Environment
        Value:
          Ref: Environment
Outputs:
  SarcNgApi:
    Description: API Gateway endpoint URL for Prod stage for SARC-NG function
    Value:
      Fn::Sub: https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/
    Export:
      Name:
        Fn::Sub: ${Environment}-sarc-ng-api-url
  SarcNgFunction:
    Description: SARC-NG Lambda Function ARN
    Value:
      Fn::GetAtt:
      - SarcNgFunction
      - Arn
    Export:
      Name:
        Fn::Sub: ${Environment}-sarc-ng-function-arn
  DatabaseEndpoint:
    Description: RDS Database Endpoint
    Value:
      Fn::GetAtt:
      - SarcDatabase
      - Endpoint.Address
    Export:
      Name:
        Fn::Sub: ${Environment}-sarc-ng-db-endpoint
  DatabasePort:
    Description: RDS Database Port
    Value:
      Fn::GetAtt:
      - SarcDatabase
      - Endpoint.Port
    Export:
      Name:
        Fn::Sub: ${Environment}-sarc-ng-db-port
  VpcId:
    Description: VPC ID
    Value:
      Ref: VPC
    Export:
      Name:
        Fn::Sub: ${Environment}-sarc-ng-vpc-id
  PublicSubnets:
    Description: Public Subnet IDs
    Value:
      Fn::Join:
      - ','
      - - Ref: PublicSubnet1
        - Ref: PublicSubnet2
        - Ref: PublicSubnet3
    Export:
      Name:
        Fn::Sub: ${Environment}-sarc-ng-public-subnets
  PrivateSubnets:
    Description: Private Subnet IDs
    Value:
      Fn::Join:
      - ','
      - - Ref: PrivateSubnet1
        - Ref: PrivateSubnet2
        - Ref: PrivateSubnet3
    Export:
      Name:
        Fn::Sub: ${Environment}-sarc-ng-private-subnets
  DatabaseSubnets:
    Description: Database Subnet IDs
    Value:
      Fn::Join:
      - ','
      - - Ref: DatabaseSubnet1
        - Ref: DatabaseSubnet2
        - Ref: DatabaseSubnet3
    Export:
      Name:
        Fn::Sub: ${Environment}-sarc-ng-database-subnets

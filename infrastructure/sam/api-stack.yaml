AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  SARC-NG Serverless Application

  SAM Template for SARC-NG deployment using Lambda and RDS

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 60
    MemorySize: 512
    Runtime: provided.al2
    Architectures:
      - x86_64

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Environment name

  DBPassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: Password for RDS MySQL instance
    Default: "ChangeMe123!"

  DBName:
    Type: String
    Default: sarcng
    Description: Database name

  # Note: Cognito resources are deployed in a separate cognito-stack.yaml
  # This allows for independent deployment and avoids circular dependencies

Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 20.10.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-vpc"
        - Key: Environment
          Value: !Ref Environment

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-igw"
        - Key: Environment
          Value: !Ref Environment

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 20.10.11.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-public-1"
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 20.10.12.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-public-2"
        - Key: Environment
          Value: !Ref Environment

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 20.10.13.0/24
      AvailabilityZone: !Select [2, !GetAZs ""]
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-public-3"
        - Key: Environment
          Value: !Ref Environment

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 20.10.1.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-private-1"
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 20.10.2.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-private-2"
        - Key: Environment
          Value: !Ref Environment

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 20.10.3.0/24
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-private-3"
        - Key: Environment
          Value: !Ref Environment

  # Database Subnets
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 20.10.21.0/24
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-db-1"
        - Key: Environment
          Value: !Ref Environment

  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 20.10.22.0/24
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-db-2"
        - Key: Environment
          Value: !Ref Environment

  DatabaseSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 20.10.23.0/24
      AvailabilityZone: !Select [2, !GetAZs ""]
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-db-3"
        - Key: Environment
          Value: !Ref Environment

  # Route Table for Public Subnets
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-public-rt"
        - Key: Environment
          Value: !Ref Environment

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet3RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref PublicRouteTable

  # DB Subnet Group
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for SARC-NG RDS
      SubnetIds:
        - !Ref DatabaseSubnet1
        - !Ref DatabaseSubnet2
        - !Ref DatabaseSubnet3
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-db-subnet-group"
        - Key: Environment
          Value: !Ref Environment

  # Lambda Security Group
  LambdaSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for Lambda function
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
          Description: Allow all outbound traffic
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-lambda-sg"
        - Key: Environment
          Value: !Ref Environment

  # RDS Security Group
  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow MySQL access from Lambda
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3306
          ToPort: 3306
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: Allow MySQL from Lambda
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-rds-sg"
        - Key: Environment
          Value: !Ref Environment

  # VPC Endpoint Security Group
  VPCEndpointSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTPS for VPC Endpoints
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          SourceSecurityGroupId: !Ref LambdaSecurityGroup
          Description: Allow HTTPS from Lambda
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-vpce-sg"
        - Key: Environment
          Value: !Ref Environment

  # VPC Endpoint for Secrets Manager
  SecretsManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      VpcId: !Ref VPC
      ServiceName: !Sub "com.amazonaws.${AWS::Region}.secretsmanager"
      VpcEndpointType: Interface
      PrivateDnsEnabled: true
      SubnetIds:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
        - !Ref PublicSubnet3
      SecurityGroupIds:
        - !Ref VPCEndpointSecurityGroup

  # AWS Secrets Manager Secret for Database Credentials
  # NOTE: Automatic rotation is NOT enabled due to AWS Academy limitations
  # For production AWS accounts, see infrastructure/sam/SECRETS-MANAGER-GUIDE.md for rotation setup
  DatabaseSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${Environment}-sarc-ng-db-credentials"
      Description: !Sub "Database credentials for SARC-NG ${Environment} environment"
      SecretString: !Sub |
        {
          "username": "root",
          "password": "${DBPassword}",
          "host": "${SarcDatabase.Endpoint.Address}",
          "port": "${SarcDatabase.Endpoint.Port}",
          "database": "${DBName}"
        }
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-db-secret"
        - Key: Environment
          Value: !Ref Environment
        - Key: Application
          Value: sarc-ng
        - Key: ManagedBy
          Value: SAM

  # ============================
  # Custom Resource to Update Cognito Callbacks with Swagger UI
  # This imports Cognito from the separate stack and adds Swagger callback
  # ============================
  UpdateCognitoCallbacksFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${Environment}-sarc-ng-update-cognito-callbacks"
      Runtime: python3.11
      Handler: index.handler
      Timeout: 30
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      InlineCode: |
        import boto3
        import cfnresponse
        import json

        def handler(event, context):
            print(f"Event: {json.dumps(event)}")

            # On delete, just return success
            if event['RequestType'] == 'Delete':
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                return

            cognito = boto3.client('cognito-idp')

            try:
                user_pool_id = event['ResourceProperties']['UserPoolId']
                client_id = event['ResourceProperties']['ClientId']
                swagger_callback = event['ResourceProperties']['SwaggerCallback']
                swagger_logout = event['ResourceProperties']['SwaggerLogout']

                print(f"Adding Swagger callback to Cognito client {client_id}")
                print(f"Swagger Callback: {swagger_callback}")

                # Get current callbacks
                response = cognito.describe_user_pool_client(
                    UserPoolId=user_pool_id,
                    ClientId=client_id
                )

                current_client = response['UserPoolClient']
                callback_urls = current_client.get('CallbackURLs', [])
                logout_urls = current_client.get('LogoutURLs', [])

                # Add Swagger URLs if not already present
                if swagger_callback not in callback_urls:
                    callback_urls.append(swagger_callback)
                if swagger_logout not in logout_urls:
                    logout_urls.append(swagger_logout)

                print(f"Updated Callback URLs: {callback_urls}")
                print(f"Updated Logout URLs: {logout_urls}")

                # Update client with Swagger URLs
                cognito.update_user_pool_client(
                    UserPoolId=user_pool_id,
                    ClientId=client_id,
                    CallbackURLs=callback_urls,
                    LogoutURLs=logout_urls,
                    AllowedOAuthFlows=current_client.get('AllowedOAuthFlows', []),
                    AllowedOAuthScopes=current_client.get('AllowedOAuthScopes', []),
                    AllowedOAuthFlowsUserPoolClient=True,
                    ExplicitAuthFlows=current_client.get('ExplicitAuthFlows', []),
                    ReadAttributes=current_client.get('ReadAttributes', []),
                    WriteAttributes=current_client.get('WriteAttributes', []),
                    PreventUserExistenceErrors=current_client.get('PreventUserExistenceErrors', 'ENABLED'),
                    EnableTokenRevocation=current_client.get('EnableTokenRevocation', True),
                    AccessTokenValidity=current_client.get('AccessTokenValidity', 60),
                    IdTokenValidity=current_client.get('IdTokenValidity', 60),
                    RefreshTokenValidity=current_client.get('RefreshTokenValidity', 30),
                    TokenValidityUnits=current_client.get('TokenValidityUnits', {})
                )

                print(f"Successfully added Swagger callback URLs")
                cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                    'Message': 'Successfully added Swagger callback URLs',
                    'CallbackURLs': ','.join(callback_urls)
                })

            except Exception as e:
                print(f"Error: {str(e)}")
                import traceback
                traceback.print_exc()
                cfnresponse.send(event, context, cfnresponse.FAILED, {}, str(e))

  # Invoke Custom Resource AFTER API Gateway exists
  # This adds the Swagger UI URL as a callback
  CognitoCallbackUpdate:
    Type: Custom::UpdateCognitoCallbacks
    DependsOn:
      - ServerlessRestApi
      - SarcNgFunction
    Properties:
      ServiceToken: !GetAtt UpdateCognitoCallbacksFunction.Arn
      UserPoolId:
        Fn::ImportValue: !Sub "${Environment}-sarc-ng-cognito-user-pool-id"
      ClientId:
        Fn::ImportValue: !Sub "${Environment}-sarc-ng-cognito-client-id"
      SwaggerCallback: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/swagger/oauth2-redirect.html"
      SwaggerLogout: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"

  # Lambda Function for SARC-NG API
  SarcNgFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: makefile
    Properties:
      CodeUri: ../../
      Handler: bootstrap
      Role: !Sub "arn:aws:iam::${AWS::AccountId}:role/LabRole"
      VpcConfig:
        SecurityGroupIds:
          - !Ref LambdaSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet1 # Use private subnets (same as RDS)
          - !Ref PrivateSubnet2
          - !Ref PrivateSubnet3
      Environment:
        Variables:
          # Secrets Manager ARN
          DB_SECRET_ARN: !Ref DatabaseSecret
          # Application configuration
          GIN_MODE: release
          LOG_LEVEL: info
          ENVIRONMENT: !Ref Environment
          # Cognito configuration (imported from cognito-stack)
          COGNITO_USER_POOL_ID:
            Fn::ImportValue: !Sub "${Environment}-sarc-ng-cognito-user-pool-id"
          COGNITO_CLIENT_ID:
            Fn::ImportValue: !Sub "${Environment}-sarc-ng-cognito-client-id"
          COGNITO_REGION: !Ref AWS::Region
          # Pre-fetched JWKS (Lambda in VPC can't fetch from Cognito without NAT Gateway)
          COGNITO_JWKS: '{"keys":[{"alg":"RS256","e":"AQAB","kid":"mwN+/S7QhdvnO8/C34CVsve4XauklPMiTFVwO69X6TI=","kty":"RSA","n":"y6gzs8USpATf-lVu4fR4R-kokVgyCI-qBIwfFst_cYRf5mAvH76H6JULh5nRJAzhAU8eoSqQG16afdUuFpJszY0vlxnuAlOjWg7FA7XolnZydZi4mK0kSC0-C4ioDMKz8b4luFllkyBNGo7l_TeKeIbIs_HS1fn02UVV-s38Hz8DRh0ZM1ZKGk6tjifdcMai_rwlmSQRMIVtgTIzNzE4fshSE3JzVZqrxim2YHQZrKp3G2HnZff4GeeHj5l0jljs5AOu6EKSjh-I6QvasBmwmdSPuwgaL35IIK3gvf_XRqsmavsYBiNvzfGKjnRHlgUUesH9Sc3tkPi8NUxQOp8BRw","use":"sig"},{"alg":"RS256","e":"AQAB","kid":"LwNLnYx5JlGD8E5EvZu5ITv7NcOUOgnvqxGkDpePWW0=","kty":"RSA","n":"vFSmSoZPS8a6JxCKYNbdy6Y3dIqY6L5tXSfKcIUBPkoP5kAt8b66uCd-knqoUrHjua5Z5ROjhvaaOOLHDMgPntl5DBun5UAJ8OOiYxVxSgoKmSeyjc0BTwGokW6fGCQyoDs0RYlhDssAP3w9igzxxmpjSALRp6ExEwUt05m9XrYU0K9MqW8m2I2jDuqcumSyxJtMAqc3n0fLldyCxpvUbWxDXqV1TSoHyyEvxtJoLWoshw5-gmIQy3GOY_aXsgJchLcSvqYEpXSlQyOWiicO_H2fBBj5Z9HPBQm0QJ9dj7fEE_KMx-y04KOvNbATlyBIIci7E98OQdwyu72qUluuCw","use":"sig"}]}'
          # Fallback values (optional - for debugging)
          DB_HOST: !GetAtt SarcDatabase.Endpoint.Address
          DB_PORT: !GetAtt SarcDatabase.Endpoint.Port
          DB_NAME: !Ref DBName
      Policies:
        # Grant permission to read the database secret
        - Statement:
            - Effect: Allow
              Action:
                - secretsmanager:GetSecretValue
                - secretsmanager:DescribeSecret
              Resource: !Ref DatabaseSecret
      Events:
        ApiGateway:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
        ApiGatewayRoot:
          Type: Api
          Properties:
            Path: /
            Method: ANY

  # RDS MySQL Database
  SarcDatabase:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceIdentifier: !Sub "${Environment}-sarc-ng-db"
      DBInstanceClass: db.t3.micro
      Engine: mysql
      EngineVersion: "8.0"
      MasterUsername: root
      MasterUserPassword: !Ref DBPassword
      DBName: !Ref DBName
      AllocatedStorage: 20
      StorageType: gp2
      BackupRetentionPeriod: 0
      DeleteAutomatedBackups: true
      DeletionProtection: false
      PubliclyAccessible: false # Lambda is in VPC
      DBSubnetGroupName: !Ref DBSubnetGroup
      VPCSecurityGroups:
        - !GetAtt RDSSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: !Sub "${Environment}-sarc-ng-database"
        - Key: Environment
          Value: !Ref Environment

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  SarcNgApi:
    Description: "API Gateway endpoint URL for Prod stage for SARC-NG function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
    Export:
      Name: !Sub "${Environment}-sarc-ng-api-url"

  SarcNgFunction:
    Description: "SARC-NG Lambda Function ARN"
    Value: !GetAtt SarcNgFunction.Arn
    Export:
      Name: !Sub "${Environment}-sarc-ng-function-arn"

  DatabaseEndpoint:
    Description: "RDS Database Endpoint"
    Value: !GetAtt SarcDatabase.Endpoint.Address
    Export:
      Name: !Sub "${Environment}-sarc-ng-db-endpoint"

  DatabasePort:
    Description: "RDS Database Port"
    Value: !GetAtt SarcDatabase.Endpoint.Port
    Export:
      Name: !Sub "${Environment}-sarc-ng-db-port"

  DatabaseSecretArn:
    Description: "ARN of the database credentials secret in Secrets Manager"
    Value: !Ref DatabaseSecret
    Export:
      Name: !Sub "${Environment}-sarc-ng-db-secret-arn"

  VpcId:
    Description: "VPC ID"
    Value: !Ref VPC
    Export:
      Name: !Sub "${Environment}-sarc-ng-vpc-id"

  PublicSubnets:
    Description: "Public Subnet IDs"
    Value:
      !Join [",", [!Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3]]
    Export:
      Name: !Sub "${Environment}-sarc-ng-public-subnets"

  PrivateSubnets:
    Description: "Private Subnet IDs"
    Value:
      !Join [
        ",",
        [!Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3],
      ]
    Export:
      Name: !Sub "${Environment}-sarc-ng-private-subnets"

  DatabaseSubnets:
    Description: "Database Subnet IDs"
    Value:
      !Join [
        ",",
        [!Ref DatabaseSubnet1, !Ref DatabaseSubnet2, !Ref DatabaseSubnet3],
      ]
    Export:
      Name: !Sub "${Environment}-sarc-ng-database-subnets"

  # Cognito Outputs (from separate cognito-stack)
  CognitoUserPoolId:
    Description: "Cognito User Pool ID (imported from cognito-stack)"
    Value:
      Fn::ImportValue: !Sub "${Environment}-sarc-ng-cognito-user-pool-id"

  CognitoUserPoolClientId:
    Description: "Cognito User Pool Client ID (imported from cognito-stack)"
    Value:
      Fn::ImportValue: !Sub "${Environment}-sarc-ng-cognito-client-id"

  CognitoUserPoolDomain:
    Description: "Cognito User Pool Domain (imported from cognito-stack)"
    Value:
      Fn::ImportValue: !Sub "${Environment}-sarc-ng-cognito-domain"

---
description: Apply when planning development approach, writing code, or managing project scope
alwaysApply: true
---

# Core Development Principles for Cursor AI Agents

> **PRIORITY**: HIGHEST - These principles apply to ALL development tasks

## **QUICK REFERENCE**

- Write minimal, clean code with single-line function comments
- Always check for existing functions before implementing new ones
- Use real production data only - never sample/mock data
- Eliminate legacy code paths and use modern APIs
- Stay within exact scope - no unrequested features or test structures
- Never use emojis in code, comments, or documentation

## **FUNDAMENTAL PRINCIPLES**

### **THE FEWER LINES OF CODE, THE BETTER**

- Prioritize concise, readable solutions
- Eliminate redundancy and unnecessary complexity

### **PROCEED LIKE A SENIOR DEVELOPER**

- Think before coding - write reasoning first
- Consider long-term maintainability
- Anticipate edge cases and future requirements

### **DO NOT STOP UNTIL COMPLETE**

- Ensure all requirements are met
- Test thoroughly and handle edge cases

## **DEVELOPMENT PROCESS**

### **REASONING-FIRST APPROACH**

**ALWAYS START WITH THREE REASONING PARAGRAPHS** before implementing:

1. Initial observations - start with uncertainty
2. Deeper analysis - consider alternative explanations
3. Most likely solution - build confidence with evidence

### **MANDATORY FUNCTION REUSE CHECK**

Before implementing ANY functionality, check existing codebase for similar functions that can be extended or reused.

## **CODE QUALITY STANDARDS**

### **CLEAN CODE REQUIREMENTS**

- Write clean, simple, readable code
- Implement features in the simplest possible way
- Keep files small and focused (<200 lines)
- Use clear, consistent naming
- Never use emojis in any code, comments, or documentation

### **COMMENTING STANDARDS**

- Every function MUST have a single-line comment describing its purpose
- Avoid comments inside function bodies unless critical
- Let code be self-documenting through clear names

### **DATA INTEGRITY REQUIREMENTS**

- NEVER use mock or sample data - always use real production data
- ALWAYS prompt user for real input if missing
- NO placeholder data - no "example", "test", or "dummy" data

## **SCOPE & MODERNIZATION MANAGEMENT**

### **SCOPE MANAGEMENT**

- NEVER add features not explicitly requested
- STICK TO THE EXACT SCOPE - implement only what the user asked for
- SUGGEST improvements but wait for approval before implementing
- DO NOT create test structures unless explicitly requested

### **LEGACY CODE ELIMINATION**

- ALWAYS eliminate legacy or backward-compatibility code paths
- Strip out deprecated APIs, shims, polyfills, and version-specific branches
- Replace with current, officially supported APIs and patterns
- Modernize dependencies and delete unused packages

## **ERROR HANDLING**

- DO NOT JUMP TO CONCLUSIONS - Consider multiple possible causes
- EXPLAIN IN PLAIN ENGLISH - Make problems understandable
- MINIMAL CHANGES ONLY - Change as few lines as possible
- TEST EACH CHANGE - Verify each modification works

## **ENFORCEMENT CHECKLIST**

### **Process & Planning**

- [ ] Followed three-paragraph reasoning process
- [ ] Checked for existing functions in codebase before implementing

### **Code Quality**

- [ ] Used simple, clean implementation
- [ ] Every function has a single-line comment describing its purpose
- [ ] Avoided unnecessary comments in function bodies
- [ ] Eliminated legacy code paths and used modern APIs

### **Data & Testing**

- [ ] Used real production data (NEVER sample/mock data)
- [ ] Tested functionality thoroughly
- [ ] Handled edge cases appropriately

### **Scope Management**

- [ ] Stayed within exact scope requested (no unrequested features)
- [ ] Did NOT create test structures unless explicitly requested

**CRITICAL**: These principles take precedence over all other implementation guidelines!
